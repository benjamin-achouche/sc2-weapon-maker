{"version":3,"sources":["shared/util/validators.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","weapons/pages/UpdateWeapon.js"],"names":["VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_MAXLENGTH","VALIDATOR_EMAIL","validate","value","validators","isValid","validator","trim","length","test","inputReducer","state","action","isTouched","Input","props","useReducer","initialValue","initialTouch","initialValid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","placeholder","onChange","onBlur","rows","style","resize","className","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialValidity","formState","useCallback","inputData","formValidity","UpdateWeapon","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedWeapon","setLoadedWeapon","weaponId","useParams","history","useHistory","name","description","inputHandler","setFormData","showUpdateWeaponModal","setShowUpdateWeaponModal","useWeapon","attack","defense","speed","selfGuardPiercing","enemyGuardPiercing","reach","counters","enemyDamageReflection","lifeContinuous","lifeHit","lifeVampire","lessHealthMoreAttack","lessHealthMoreDefense","lessHealthMoreSpeed","lessHealthMoreLifeCont","lessHealthSCLvUp","SCAttack","SCDefense","SCSpeed","SCEnemyGuardPiercing","SCLifeContinuous","SCChargeSpeed","SCType","weaponState","setLevelHandler","setWeaponData","a","process","responseData","weapon","attributes","points","fetchWeapon","cancelUpdateWeaponHandler","updateWeaponSubmitHandler","preventDefault","JSON","stringify","Authorization","token","push","userId","asDarkOverlay","big","weaponUpdate","idCount","isSC","attribute","weaponAttributes","Object","keys","Fragment","map","attr","image","attributeValue","attrValues","currentLevel","levels","tooltip","lvlPtsCost","onClick","initialAttributes","initialPoints","onClear","onSubmit","show","onCancel","header","footerClass","footer","inverse","disabled","left","to"],"mappings":"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","file":"static/js/9.458b874e.chunk.js","sourcesContent":["const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\r\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\r\nconst VALIDATOR_TYPE_FILE = 'FILE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MAXLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n","import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { validate } from '../../util/validators';\r\nimport './Input.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE':\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators),\r\n      };\r\n    case 'TOUCH':\r\n      return {\r\n        ...state,\r\n        isTouched: true,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = (props) => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || '',\r\n    isTouched: props.initialTouch || false,\r\n    isValid: props.initialValid || false,\r\n  });\r\n\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  const changeHandler = (event) => {\r\n    dispatch({\r\n      type: 'CHANGE',\r\n      val: event.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: 'TOUCH',\r\n    });\r\n  };\r\n\r\n  const element =\r\n    props.element === 'input' ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={props.value || inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={props.id}\r\n        rows={props.rows || 3}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n        style={{ resize: 'none' }}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && 'form-control--invalid'\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'INPUT_CHANGE':\r\n      let formIsValid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: { value: action.value, isValid: action.isValid },\r\n        },\r\n        isValid: formIsValid,\r\n      };\r\n    case 'SET_DATA':\r\n      return {\r\n        inputs: action.inputs,\r\n        isValid: action.formIsValid,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialValidity) => {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialValidity,\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: 'INPUT_CHANGE',\r\n      inputId: id,\r\n      value: value,\r\n      isValid: isValid,\r\n    });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: 'SET_DATA',\r\n      inputs: inputData,\r\n      formIsValid: formValidity,\r\n    });\r\n  }, []);\r\n\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from '../../shared/util/validators';\r\nimport Modal from '../../shared/components/UIElements/Modal';\r\nimport Attribute from '../../shared/components/WeaponUIElements/Attribute';\r\nimport weaponAttributes from '../util/weaponAttributes';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useWeapon } from '../../shared/hooks/weapon-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './WeaponForm.css';\r\n\r\nconst UpdateWeapon = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedWeapon, setLoadedWeapon] = useState('');\r\n  const weaponId = useParams().weaponId;\r\n  const history = useHistory();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      name: {\r\n        value: '',\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: '',\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const [showUpdateWeaponModal, setShowUpdateWeaponModal] = useState(false);\r\n\r\n  const [weaponState, setLevelHandler, setWeaponData] = useWeapon(\r\n    {\r\n      attack: 4,\r\n      defense: 4,\r\n      speed: 3,\r\n      selfGuardPiercing: 7,\r\n      enemyGuardPiercing: 1,\r\n      reach: 2,\r\n      counters: 2,\r\n      enemyDamageReflection: 1,\r\n      lifeContinuous: 4,\r\n      lifeHit: 4,\r\n      lifeVampire: 1,\r\n      lessHealthMoreAttack: 1,\r\n      lessHealthMoreDefense: 1,\r\n      lessHealthMoreSpeed: 1,\r\n      lessHealthMoreLifeCont: 1,\r\n      lessHealthSCLvUp: 1,\r\n      SCAttack: 1,\r\n      SCDefense: 1,\r\n      SCSpeed: 3,\r\n      SCEnemyGuardPiercing: 1,\r\n      SCLifeContinuous: 3,\r\n      SCChargeSpeed: 3,\r\n      SCType: 2,\r\n    },\r\n    100\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchWeapon = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/weapons/${weaponId}`\r\n        );\r\n        setLoadedWeapon(responseData.weapon);\r\n        setWeaponData(\r\n          responseData.weapon.attributes,\r\n          responseData.weapon.points\r\n        );\r\n        setFormData(\r\n          {\r\n            ...formState.inputs,\r\n            name: {\r\n              value: responseData.weapon.name,\r\n              isValid: true,\r\n            },\r\n            description: {\r\n              value: responseData.weapon.description,\r\n              isValid: true,\r\n            },\r\n          },\r\n          true\r\n        );\r\n      } catch (err) {}\r\n    };\r\n    fetchWeapon();\r\n  }, [sendRequest, weaponId, setWeaponData, setFormData]);\r\n\r\n  const showUpdateWeaponModalHandler = () => {\r\n    setShowUpdateWeaponModal(true);\r\n  };\r\n\r\n  const cancelUpdateWeaponHandler = () => {\r\n    setShowUpdateWeaponModal(false);\r\n  };\r\n\r\n  const updateWeaponSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/weapons/${weaponId}`,\r\n        'PATCH',\r\n        JSON.stringify({\r\n          name: formState.inputs.name.value,\r\n          description: formState.inputs.description.value,\r\n          attributes: weaponState.attributes,\r\n          points: weaponState.points,\r\n        }),\r\n        {\r\n          'Content-Type': 'application/json',\r\n          Authorization: 'Bearer ' + auth.token,\r\n        }\r\n      );\r\n\r\n      history.push(`/${auth.userId}/weapons`);\r\n    } catch (err) {}\r\n    setShowUpdateWeaponModal(false);\r\n  };\r\n\r\n  if (isLoading && !formState.isValid) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner asDarkOverlay big />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const attributes = [];\r\n  let idCount = 0;\r\n  let isSC = false;\r\n\r\n  for (const attribute in weaponAttributes) {\r\n    idCount++;\r\n    if (idCount > 16) {\r\n      isSC = true;\r\n    }\r\n    attributes.push({\r\n      id: idCount,\r\n      name: attribute,\r\n      isSC: isSC,\r\n    });\r\n  }\r\n\r\n  let weaponUpdate;\r\n\r\n  if (typeof loadedWeapon !== 'string' && !error) {\r\n    if (Object.keys(loadedWeapon).length > 0) {\r\n      weaponUpdate = (\r\n        <React.Fragment>\r\n          <div className=\"new-weapon__points\">\r\n            {weaponState.points} /{' '}\r\n            {weaponState.points > 100 ? weaponState.points : 100}\r\n          </div>\r\n          <div className=\"new-weapon\">\r\n            {attributes.map((attr) =>\r\n              !attr.isSC ? (\r\n                <Attribute\r\n                  key={'Attribute ' + weaponAttributes[attr.name].name}\r\n                  id={attr.id}\r\n                  isSC={attr.isSC}\r\n                  name={weaponAttributes[attr.name].name}\r\n                  image={weaponAttributes[attr.name].image}\r\n                  attributeValue={\r\n                    weaponAttributes[attr.name].attributeValue[\r\n                      weaponState.attributes[attr.name] - 1\r\n                    ]\r\n                  }\r\n                  attrValues={weaponAttributes[attr.name].attributeValue}\r\n                  currentLevel={weaponState.attributes[attr.name]}\r\n                  levels={weaponAttributes[attr.name].levels}\r\n                  tooltip={weaponAttributes[attr.name].tooltip}\r\n                  lvlPtsCost={weaponAttributes[attr.name].lvlPtsCost}\r\n                  onClick={setLevelHandler}\r\n                  initialAttributes={weaponState.attributes[attr.name]}\r\n                  initialPoints={weaponState.points}\r\n                />\r\n              ) : (\r\n                <Attribute\r\n                  key={'Attribute ' + weaponAttributes[attr.name].name}\r\n                  id={attr.id}\r\n                  isSC={attr.isSC}\r\n                  name={weaponAttributes[attr.name].name}\r\n                  image={weaponAttributes[attr.name].image}\r\n                  attributeValue={\r\n                    weaponAttributes[attr.name].attributeValue[\r\n                      weaponState.attributes[attr.name] - 1\r\n                    ]\r\n                  }\r\n                  attrValues={weaponAttributes[attr.name].attributeValue}\r\n                  currentLevel={weaponState.attributes[attr.name]}\r\n                  levels={weaponAttributes[attr.name].levels}\r\n                  tooltip={weaponAttributes[attr.name].tooltip}\r\n                  lvlPtsCost={weaponAttributes[attr.name].lvlPtsCost}\r\n                  onClick={setLevelHandler}\r\n                  initialAttributes={weaponState.attributes[attr.name]}\r\n                  initialPoints={weaponState.points}\r\n                />\r\n              )\r\n            )}\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n\r\n      <form onSubmit={updateWeaponSubmitHandler}>\r\n        <Modal\r\n          show={showUpdateWeaponModal}\r\n          onCancel={cancelUpdateWeaponHandler}\r\n          header=\"Please enter your weapon informations.\"\r\n          footerClass=\"weapon-item__modal-actions\"\r\n          footer={\r\n            <React.Fragment>\r\n              {isLoading && (\r\n                <div className=\"center\">\r\n                  <LoadingSpinner asDarkOverlay />\r\n                </div>\r\n              )}\r\n              <Button type=\"button\" inverse onClick={cancelUpdateWeaponHandler}>\r\n                CANCEL\r\n              </Button>\r\n              <Button\r\n                onClick={updateWeaponSubmitHandler}\r\n                disabled={!formState.isValid}\r\n              >\r\n                UPDATE\r\n              </Button>\r\n            </React.Fragment>\r\n          }\r\n        >\r\n          <Input\r\n            id=\"name\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            label=\"Name\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid weapon name.\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedWeapon.name}\r\n            initialTouch={true}\r\n            initialValid={true}\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            element=\"textarea\"\r\n            label=\"Description\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            errorText=\"Please enter a valid description (at least 5 characters).\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedWeapon.description}\r\n            initialTouch={true}\r\n            initialValid={true}\r\n          />\r\n        </Modal>\r\n        <Button\r\n          type=\"button\"\r\n          className=\"new-weapon__create-btn\"\r\n          style={{ left: '8rem' }}\r\n          onClick={showUpdateWeaponModalHandler}\r\n        >\r\n          Update Weapon\r\n        </Button>\r\n        <Button to=\"./\" className=\"new-weapon__create-btn\">\r\n          Back\r\n        </Button>\r\n      </form>\r\n\r\n      {weaponUpdate}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdateWeapon;\r\n"],"sourceRoot":""}